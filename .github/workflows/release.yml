name: Release Management

on:
  # Disabled until basic CI is working
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          
          # Validate version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta1"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          if git rev-parse "${{ steps.get-version.outputs.tag }}" >/dev/null 2>&1; then
            if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "❌ Tag ${{ steps.get-version.outputs.tag }} already exists"
              exit 1
            fi
          fi

      - name: Validate changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "⚠️ No CHANGELOG.md found"
          else
            # Check if changelog has entry for this version
            if ! grep -q "${{ steps.get-version.outputs.version }}" CHANGELOG.md; then
              echo "⚠️ No changelog entry found for ${{ steps.get-version.outputs.version }}"
            fi
          fi

  # Run full test suite
  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: selfos
          POSTGRES_PASSWORD: selfos
          POSTGRES_DB: selfos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd apps/backend_api
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Create test environment
        run: |
          cd apps/backend_api
          cat > .env.test << EOF
          DATABASE_URL=postgresql://selfos:selfos@localhost:5432/selfos_test
          REDIS_URL=redis://localhost:6379
          SECRET_KEY=test-secret-key-for-release
          AI_PROVIDER=local
          MEMORY_VECTOR_STORE=memory
          EVENT_SYSTEM_ENABLED=true
          LOG_LEVEL=INFO
          GOOGLE_APPLICATION_CREDENTIALS=/tmp/dummy-firebase.json
          EOF
          echo '{"type": "service_account", "project_id": "test"}' > /tmp/dummy-firebase.json

      - name: Run comprehensive tests
        run: |
          cd apps/backend_api
          export $(cat .env.test | xargs)
          
          # Run all test suites
          alembic upgrade head
          pytest tests/ -v --cov=. --cov-report=xml --cov-fail-under=85
          python scripts/test_runner.py integration
          python scripts/test_runner.py chat

  # Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      ai-engine-image: ${{ steps.build-ai-engine.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: apps/backend_api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ needs.validate-release.outputs.version }}
            ghcr.io/${{ github.repository }}/backend:latest
          labels: |
            org.opencontainers.image.title=SelfOS Backend API
            org.opencontainers.image.description=Backend API for SelfOS
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push AI engine image
        id: build-ai-engine
        uses: docker/build-push-action@v5
        with:
          context: apps/ai_engine
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/ai-engine:${{ needs.validate-release.outputs.version }}
            ghcr.io/${{ github.repository }}/ai-engine:latest
          labels: |
            org.opencontainers.image.title=SelfOS AI Engine
            org.opencontainers.image.description=AI Engine for SelfOS
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}/backend:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: backend-sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: backend-sbom.spdx.json

  # Generate release notes
  generate-changelog:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating changelog from beginning"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${{ needs.validate-release.outputs.version }}"
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog
          cat > changelog.md << EOF
          ## What's Changed
          
          ### 🚀 Features
          $(echo "$COMMITS" | grep -i "feat\|add\|new" || echo "- No new features")
          
          ### 🐛 Bug Fixes
          $(echo "$COMMITS" | grep -i "fix\|bug" || echo "- No bug fixes")
          
          ### 📚 Documentation
          $(echo "$COMMITS" | grep -i "doc\|readme" || echo "- No documentation changes")
          
          ### 🔧 Other Changes
          $(echo "$COMMITS" | grep -v -i "feat\|add\|new\|fix\|bug\|doc\|readme" || echo "- No other changes")
          
          ### 🏗️ Technical Details
          - Backend API: \`ghcr.io/${{ github.repository }}/backend:${{ needs.validate-release.outputs.version }}\`
          - AI Engine: \`ghcr.io/${{ github.repository }}/ai-engine:${{ needs.validate-release.outputs.version }}\`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ needs.validate-release.outputs.version }}
          EOF
          
          # Output for GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.md

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-release, generate-changelog]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Create or update tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.validate-release.outputs.tag }}" -m "Release ${{ needs.validate-release.outputs.version }}"
          git push origin "${{ needs.validate-release.outputs.tag }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          release_name: Release ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

      - name: Upload SBOM to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sbom/backend-sbom.spdx.json
          asset_name: backend-sbom.spdx.json
          asset_content_type: application/json

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    needs: [create-release, build-release]
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment: production
      backend_image: ${{ needs.build-release.outputs.backend-image }}
      ai_engine_image: ${{ needs.build-release.outputs.ai-engine-image }}

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update version in files
        run: |
          # Update version in package files
          if [ -f apps/backend_api/version.py ]; then
            sed -i "s/__version__ = .*/__version__ = \"${{ needs.validate-release.outputs.version }}\"/" apps/backend_api/version.py
          fi

      - name: Create pull request for version bump
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          title: "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          body: |
            Automated version bump after release ${{ needs.validate-release.outputs.version }}
            
            - Updated version files
            - Generated automatically by release workflow
          branch: chore/version-bump-${{ needs.validate-release.outputs.version }}
          base: main

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "🎉 New Release Published!",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Version",
                  "value": "${{ needs.validate-release.outputs.version }}",
                  "short": true
                }, {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Release Notes",
                  "value": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}",
                  "short": false
                }]
              }]
            }