name: Monitoring & Health Checks

on:
  # Disabled until production deployment exists
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - all
      check_type:
        description: 'Type of check to perform'
        required: true
        default: 'health'
        type: choice
        options:
          - health
          - performance
          - security
          - all

env:
  STAGING_URL: https://staging-api.selfos.com
  PRODUCTION_URL: https://api.selfos.com

jobs:
  # Basic health checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'health' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment == 'all' && fromJson('["staging", "production"]') || fromJson(format('["{0}"]', github.event.inputs.environment || 'production')) }}
    
    steps:
      - name: Set environment URL
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "API_URL=${{ env.STAGING_URL }}" >> $GITHUB_ENV
          else
            echo "API_URL=${{ env.PRODUCTION_URL }}" >> $GITHUB_ENV
          fi

      - name: Basic health check
        run: |
          echo "üè• Checking health of ${{ matrix.environment }} environment..."
          
          # Basic health endpoint
          response=$(curl -s -w "%{http_code}" -o /tmp/health.json "$API_URL/health")
          if [ "$response" != "200" ]; then
            echo "‚ùå Basic health check failed with status $response"
            exit 1
          fi
          
          echo "‚úÖ Basic health check passed"

      - name: Detailed health check
        run: |
          echo "üîç Running detailed health checks..."
          
          # Detailed health endpoint
          response=$(curl -s -w "%{http_code}" -o /tmp/health-detailed.json "$API_URL/health/detailed")
          if [ "$response" != "200" ]; then
            echo "‚ùå Detailed health check failed with status $response"
            exit 1
          fi
          
          # Parse and validate components
          jq -r '.components | to_entries[] | "\(.key): \(.value.status)"' /tmp/health-detailed.json
          
          # Check for any failing components
          failing_components=$(jq -r '.components | to_entries[] | select(.value.status != "healthy") | .key' /tmp/health-detailed.json)
          if [ -n "$failing_components" ]; then
            echo "‚ùå Failing components: $failing_components"
            exit 1
          fi
          
          echo "‚úÖ All components healthy"

      - name: AI services health check
        run: |
          echo "ü§ñ Checking AI services..."
          
          # AI health endpoint
          response=$(curl -s -w "%{http_code}" -o /tmp/ai-health.json "$API_URL/api/ai/health")
          if [ "$response" != "200" ]; then
            echo "‚ùå AI health check failed with status $response"
            exit 1
          fi
          
          ai_status=$(jq -r '.status' /tmp/ai-health.json)
          if [ "$ai_status" != "healthy" ]; then
            echo "‚ùå AI service not healthy: $ai_status"
            exit 1
          fi
          
          echo "‚úÖ AI services healthy"

      - name: Database connectivity check
        run: |
          echo "üóÑÔ∏è Checking database connectivity..."
          
          # Database health endpoint
          response=$(curl -s -w "%{http_code}" -o /tmp/db-health.json "$API_URL/health/database/connectivity")
          if [ "$response" != "200" ]; then
            echo "‚ùå Database connectivity check failed with status $response"
            exit 1
          fi
          
          echo "‚úÖ Database connectivity check passed"

      - name: Alert on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "üö® Health Check Failed",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Environment",
                  "value": "${{ matrix.environment }}",
                  "short": true
                }, {
                  "title": "URL",
                  "value": "${{ env.API_URL }}",
                  "short": true
                }, {
                  "title": "Time",
                  "value": "$(date -u)",
                  "short": false
                }]
              }]
            }

  # Performance monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'all' || (github.event_name == 'schedule' && github.event.schedule == '0 6 * * *')
    
    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment == 'all' && fromJson('["staging", "production"]') || fromJson(format('["{0}"]', github.event.inputs.environment || 'production')) }}
    
    steps:
      - name: Set environment URL
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "API_URL=${{ env.STAGING_URL }}" >> $GITHUB_ENV
          else
            echo "API_URL=${{ env.PRODUCTION_URL }}" >> $GITHUB_ENV
          fi

      - name: Install performance testing tools
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils curl jq

      - name: Response time check
        run: |
          echo "‚è±Ô∏è Checking response times..."
          
          # Test multiple endpoints
          endpoints=(
            "/health"
            "/api/ai/health"
            "/health/detailed"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            
            # Measure response time
            response_time=$(curl -s -w "%{time_total}" -o /dev/null "$API_URL$endpoint")
            response_time_ms=$(echo "$response_time * 1000" | bc -l | cut -d. -f1)
            
            echo "Response time: ${response_time_ms}ms"
            
            # Alert if response time > 2 seconds
            if [ "$response_time_ms" -gt 2000 ]; then
              echo "‚ö†Ô∏è Slow response time for $endpoint: ${response_time_ms}ms"
            fi
          done

      - name: Load testing
        run: |
          echo "üîÑ Running light load test..."
          
          # Run concurrent requests to health endpoint
          ab -n 100 -c 10 -g ab-results.tsv "$API_URL/health"
          
          # Parse results
          avg_time=$(grep "Time per request:" ab-results.tsv | head -1 | awk '{print $4}')
          echo "Average request time: ${avg_time}ms"
          
          # Check if average time is acceptable (< 500ms)
          if (( $(echo "$avg_time > 500" | bc -l) )); then
            echo "‚ö†Ô∏è High average response time: ${avg_time}ms"
          fi

      - name: Memory and CPU metrics (if available)
        run: |
          echo "üìä Checking system metrics..."
          
          # Try to get metrics endpoint if available
          if curl -s "$API_URL/metrics" > /dev/null 2>&1; then
            curl -s "$API_URL/metrics" | grep -E "(cpu|memory|requests)" || echo "No standard metrics found"
          else
            echo "No metrics endpoint available"
          fi

  # Security monitoring
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'all' || (github.event_name == 'schedule' && github.event.schedule == '0 6 * * *')
    
    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment == 'all' && fromJson('["staging", "production"]') || fromJson(format('["{0}"]', github.event.inputs.environment || 'production')) }}
    
    steps:
      - name: Set environment URL
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "API_URL=${{ env.STAGING_URL }}" >> $GITHUB_ENV
          else
            echo "API_URL=${{ env.PRODUCTION_URL }}" >> $GITHUB_ENV
          fi

      - name: SSL/TLS check
        run: |
          echo "üîí Checking SSL/TLS configuration..."
          
          # Extract hostname from URL
          hostname=$(echo "$API_URL" | sed 's|https\?://||' | sed 's|/.*||')
          
          # Check SSL certificate
          ssl_info=$(echo | openssl s_client -servername "$hostname" -connect "$hostname:443" 2>/dev/null | openssl x509 -noout -dates)
          
          echo "SSL Certificate info:"
          echo "$ssl_info"
          
          # Check certificate expiry
          expiry_date=$(echo "$ssl_info" | grep "notAfter" | cut -d= -f2)
          expiry_timestamp=$(date -d "$expiry_date" +%s)
          current_timestamp=$(date +%s)
          days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
          
          echo "Certificate expires in $days_until_expiry days"
          
          if [ "$days_until_expiry" -lt 30 ]; then
            echo "‚ö†Ô∏è Certificate expires soon: $days_until_expiry days"
          fi

      - name: Security headers check
        run: |
          echo "üõ°Ô∏è Checking security headers..."
          
          # Check for security headers
          headers=$(curl -s -I "$API_URL/health")
          
          # Required headers
          required_headers=(
            "X-Content-Type-Options"
            "X-Frame-Options"
            "Strict-Transport-Security"
          )
          
          for header in "${required_headers[@]}"; do
            if echo "$headers" | grep -qi "$header"; then
              echo "‚úÖ $header present"
            else
              echo "‚ö†Ô∏è $header missing"
            fi
          done

      - name: Rate limiting check
        run: |
          echo "üö¶ Checking rate limiting..."
          
          # Test rate limiting by making rapid requests
          for i in {1..20}; do
            response=$(curl -s -w "%{http_code}" -o /dev/null "$API_URL/health")
            if [ "$response" = "429" ]; then
              echo "‚úÖ Rate limiting is working (got 429 after $i requests)"
              break
            fi
            sleep 0.1
          done

  # Availability monitoring
  availability-check:
    name: Availability Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '*/15 * * * *'
    
    steps:
      - name: Check production availability
        run: |
          echo "üì° Checking production availability..."
          
          response=$(curl -s -w "%{http_code}" -o /dev/null "${{ env.PRODUCTION_URL }}/health")
          if [ "$response" != "200" ]; then
            echo "‚ùå Production is down (HTTP $response)"
            # Record downtime
            echo "$(date -u): Production down (HTTP $response)" >> /tmp/downtime.log
            exit 1
          fi
          
          echo "‚úÖ Production is available"

      - name: Check staging availability
        run: |
          echo "üì° Checking staging availability..."
          
          response=$(curl -s -w "%{http_code}" -o /dev/null "${{ env.STAGING_URL }}/health")
          if [ "$response" != "200" ]; then
            echo "‚ö†Ô∏è Staging is down (HTTP $response)"
            # Don't fail for staging, just warn
          else
            echo "‚úÖ Staging is available"
          fi

      - name: Alert on production downtime
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "üö® PRODUCTION DOWN",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Status",
                  "value": "Production API is not responding",
                  "short": false
                }, {
                  "title": "URL",
                  "value": "${{ env.PRODUCTION_URL }}",
                  "short": true
                }, {
                  "title": "Time",
                  "value": "$(date -u)",
                  "short": true
                }, {
                  "title": "Action Required",
                  "value": "Immediate investigation needed",
                  "short": false
                }]
              }]
            }

  # Generate monitoring report
  monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check]
    if: always() && (github.event.inputs.check_type == 'all' || (github.event_name == 'schedule' && github.event.schedule == '0 6 * * *'))
    
    steps:
      - name: Generate report
        run: |
          echo "# Daily Monitoring Report" > monitoring-report.md
          echo "**Date:** $(date -u)" >> monitoring-report.md
          echo "" >> monitoring-report.md
          
          echo "## Health Check Results" >> monitoring-report.md
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "‚úÖ All health checks passed" >> monitoring-report.md
          else
            echo "‚ùå Health check failures detected" >> monitoring-report.md
          fi
          echo "" >> monitoring-report.md
          
          echo "## Performance Check Results" >> monitoring-report.md
          if [ "${{ needs.performance-check.result }}" = "success" ]; then
            echo "‚úÖ Performance within acceptable limits" >> monitoring-report.md
          else
            echo "‚ö†Ô∏è Performance issues detected" >> monitoring-report.md
          fi
          echo "" >> monitoring-report.md
          
          echo "## Security Check Results" >> monitoring-report.md
          if [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "‚úÖ Security checks passed" >> monitoring-report.md
          else
            echo "‚ö†Ô∏è Security issues detected" >> monitoring-report.md
          fi
          echo "" >> monitoring-report.md
          
          echo "## Recommendations" >> monitoring-report.md
          echo "- Review any failed checks immediately" >> monitoring-report.md
          echo "- Monitor trends for degrading performance" >> monitoring-report.md
          echo "- Update security configurations as needed" >> monitoring-report.md

      - name: Upload monitoring report
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-report-$(date +%Y%m%d)
          path: monitoring-report.md

      - name: Send daily report
        if: github.event_name == 'schedule' && github.event.schedule == '0 6 * * *'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ (needs.health-check.result == 'success' && needs.performance-check.result == 'success' && needs.security-check.result == 'success') && 'success' || 'warning' }}
          channel: '#monitoring'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "üìä Daily Monitoring Report",
              "attachments": [{
                "color": "${{ (needs.health-check.result == 'success' && needs.performance-check.result == 'success' && needs.security-check.result == 'success') && 'good' || 'warning' }}",
                "fields": [{
                  "title": "Health",
                  "value": "${{ needs.health-check.result == 'success' && '‚úÖ Healthy' || '‚ùå Issues' }}",
                  "short": true
                }, {
                  "title": "Performance",
                  "value": "${{ needs.performance-check.result == 'success' && '‚úÖ Good' || '‚ö†Ô∏è Issues' }}",
                  "short": true
                }, {
                  "title": "Security",
                  "value": "${{ needs.security-check.result == 'success' && '‚úÖ Secure' || '‚ö†Ô∏è Issues' }}",
                  "short": true
                }]
              }]
            }