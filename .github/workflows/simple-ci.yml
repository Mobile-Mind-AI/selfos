name: Simple CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  # Debug info
  debug:
    name: Debug Info
    runs-on: ubuntu-latest
    steps:
      - name: Show trigger info
        run: |
          echo "Workflow triggered!"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"

  # Basic backend testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: selfos
          POSTGRES_PASSWORD: selfos
          POSTGRES_DB: selfos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd apps/backend_api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test environment
        run: |
          cd apps/backend_api
          cat > .env.test << EOF
          DATABASE_URL=postgresql://selfos:selfos@localhost:5432/selfos_test
          SECRET_KEY=test-secret-key-for-ci
          AI_PROVIDER=local
          MEMORY_VECTOR_STORE=memory
          EVENT_SYSTEM_ENABLED=true
          LOG_LEVEL=INFO
          GOOGLE_APPLICATION_CREDENTIALS=/tmp/dummy-firebase.json
          EOF
          echo '{"type": "service_account", "project_id": "test"}' > /tmp/dummy-firebase.json

      - name: Run database migrations
        run: |
          cd apps/backend_api
          export $(cat .env.test | xargs)
          alembic upgrade head

      - name: Run tests
        run: |
          cd apps/backend_api
          export $(cat .env.test | xargs)
          python -m pytest tests/ -v --tb=short

  # Basic AI engine testing
  ai-engine-test:
    name: AI Engine Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install AI Engine dependencies
        run: |
          cd apps/ai_engine
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run AI Engine tests
        run: |
          cd apps/ai_engine
          # Create basic test if none exist
          if [ ! -d tests/ ]; then
            mkdir -p tests
            echo "def test_import(): import orchestrator" > tests/test_basic.py
          fi
          python -m pytest tests/ -v

  # Basic security checks
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: pip install safety bandit

      - name: Check dependencies for vulnerabilities
        run: |
          cd apps/backend_api
          safety check --file requirements.txt || echo "Safety check completed"

      - name: Run static security analysis
        run: |
          cd apps/backend_api
          bandit -r . --skip B101 || echo "Bandit scan completed"

  # Success summary
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [debug, backend-test, ai-engine-test, security-check]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "CI Results:"
          echo "Backend Tests: ${{ needs.backend-test.result }}"
          echo "AI Engine Tests: ${{ needs.ai-engine-test.result }}"
          echo "Security Check: ${{ needs.security-check.result }}"
          
          if [[ "${{ needs.backend-test.result }}" == "success" && "${{ needs.ai-engine-test.result }}" == "success" ]]; then
            echo "✅ Core tests passed!"
            exit 0
          else
            echo "❌ Some tests failed"
            exit 1
          fi