name: Security Scanning

on:
  # Disabled until basic setup is complete
  workflow_dispatch:

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          cd apps/backend_api
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          cd apps/backend_api
          safety check --file requirements.txt --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          cd apps/backend_api
          pip-audit --format=json --output=pip-audit-report.json . || true

      - name: Check for high-severity vulnerabilities
        run: |
          cd apps/backend_api
          # Fail the build if high-severity vulnerabilities are found
          if [ -f safety-report.json ]; then
            HIGH_VULN=$(jq '.vulnerabilities | map(select(.severity == "high" or .severity == "critical")) | length' safety-report.json 2>/dev/null || echo "0")
            if [ "$HIGH_VULN" -gt 0 ]; then
              echo "❌ Found $HIGH_VULN high/critical severity vulnerabilities"
              jq '.vulnerabilities | map(select(.severity == "high" or .severity == "critical"))' safety-report.json
              exit 1
            fi
          fi

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: vulnerability-reports
          path: |
            apps/backend_api/safety-report.json
            apps/backend_api/pip-audit-report.json

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r apps/backend_api/ \
            -f json \
            -o bandit-report.json \
            --skip B101,B601 \
            --exclude apps/backend_api/tests/ || true

      - name: Check for high-severity security issues
        run: |
          if [ -f bandit-report.json ]; then
            HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM")) | length' bandit-report.json 2>/dev/null || echo "0")
            if [ "$HIGH_ISSUES" -gt 0 ]; then
              echo "⚠️ Found $HIGH_ISSUES medium/high severity security issues"
              jq '.results | map(select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM"))' bandit-report.json
              # Don't fail for medium issues, just warn
            fi
          fi

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: apps/backend_api
          load: true
          tags: selfos/backend:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'selfos/backend:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Run Trivy for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'selfos/backend:security-scan'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # Secrets scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install license checker
        run: pip install pip-licenses

      - name: Check Python package licenses
        run: |
          cd apps/backend_api
          pip install -r requirements.txt
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for problematic licenses
          pip-licenses --fail-on="GPL v3"

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: apps/backend_api/licenses.json

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd apps/backend_api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Security summary and reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, secrets-scan, license-scan, codeql]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          
          # Check job statuses
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ Dependency Scan: PASSED" >> security-summary.md
          else
            echo "❌ Dependency Scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.sast-scan.result }}" = "success" ]; then
            echo "✅ Static Analysis: PASSED" >> security-summary.md
          else
            echo "❌ Static Analysis: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "✅ Container Scan: PASSED" >> security-summary.md
          else
            echo "❌ Container Scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.secrets-scan.result }}" = "success" ]; then
            echo "✅ Secrets Scan: PASSED" >> security-summary.md
          else
            echo "❌ Secrets Scan: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.license-scan.result }}" = "success" ]; then
            echo "✅ License Check: PASSED" >> security-summary.md
          else
            echo "❌ License Check: FAILED" >> security-summary.md
          fi
          
          if [ "${{ needs.codeql.result }}" = "success" ]; then
            echo "✅ CodeQL Analysis: PASSED" >> security-summary.md
          else
            echo "❌ CodeQL Analysis: FAILED" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Notify security team on failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "🚨 Security Scan Failure",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }, {
                  "title": "Action",
                  "value": "Please review security scan results",
                  "short": false
                }]
              }]
            }