"""Add OnboardingState table

Revision ID: 78b46d09ae15
Revises: 004
Create Date: 2025-07-01 14:09:54.796113

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '78b46d09ae15'
down_revision = '004'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_goals_id'), table_name='goals')
    op.drop_index(op.f('ix_goals_life_area_created'), table_name='goals')
    op.drop_index(op.f('ix_goals_project_created'), table_name='goals')
    op.drop_index(op.f('ix_goals_user_created'), table_name='goals')
    op.drop_index(op.f('ix_goals_user_status'), table_name='goals')
    op.drop_table('goals')
    op.drop_index(op.f('ix_memory_items_id'), table_name='memory_items')
    op.drop_index(op.f('ix_memory_user_timestamp'), table_name='memory_items')
    op.drop_table('memory_items')
    op.drop_index(op.f('ix_conversation_logs_fallback'), table_name='conversation_logs')
    op.drop_index(op.f('ix_conversation_logs_id'), table_name='conversation_logs')
    op.drop_index(op.f('ix_conversation_logs_intent_confidence'), table_name='conversation_logs')
    op.drop_index(op.f('ix_conversation_logs_session_turn'), table_name='conversation_logs')
    op.drop_index(op.f('ix_conversation_logs_user_created'), table_name='conversation_logs')
    op.drop_table('conversation_logs')
    op.drop_index(op.f('ix_user_preferences_id'), table_name='user_preferences')
    op.drop_index(op.f('ix_user_prefs_user_created'), table_name='user_preferences')
    op.drop_table('user_preferences')
    op.drop_index(op.f('ix_conversation_sessions_id'), table_name='conversation_sessions')
    op.drop_index(op.f('ix_conversation_sessions_status_created'), table_name='conversation_sessions')
    op.drop_index(op.f('ix_conversation_sessions_type_user'), table_name='conversation_sessions')
    op.drop_index(op.f('ix_conversation_sessions_user_activity'), table_name='conversation_sessions')
    op.drop_table('conversation_sessions')
    op.drop_index(op.f('ix_feedback_context'), table_name='feedback_logs')
    op.drop_index(op.f('ix_feedback_logs_id'), table_name='feedback_logs')
    op.drop_index(op.f('ix_feedback_processed'), table_name='feedback_logs')
    op.drop_index(op.f('ix_feedback_session'), table_name='feedback_logs')
    op.drop_index(op.f('ix_feedback_user_created'), table_name='feedback_logs')
    op.drop_index(op.f('ix_feedback_user_type'), table_name='feedback_logs')
    op.drop_table('feedback_logs')
    op.drop_index(op.f('ix_assistant_profiles_id'), table_name='assistant_profiles')
    op.drop_index(op.f('ix_assistant_profiles_model_language'), table_name='assistant_profiles')
    op.drop_index(op.f('ix_assistant_profiles_user_active'), table_name='assistant_profiles')
    op.drop_index(op.f('ix_assistant_profiles_user_created'), table_name='assistant_profiles')
    op.drop_index(op.f('ix_assistant_profiles_user_default'), table_name='assistant_profiles')
    op.drop_table('assistant_profiles')
    op.drop_index(op.f('ix_intent_feedback_id'), table_name='intent_feedback')
    op.drop_index(op.f('ix_intent_feedback_original_intent'), table_name='intent_feedback')
    op.drop_index(op.f('ix_intent_feedback_quality'), table_name='intent_feedback')
    op.drop_index(op.f('ix_intent_feedback_user_created'), table_name='intent_feedback')
    op.drop_table('intent_feedback')
    op.drop_index(op.f('ix_story_content_type'), table_name='story_sessions')
    op.drop_index(op.f('ix_story_posted_at'), table_name='story_sessions')
    op.drop_index(op.f('ix_story_sessions_id'), table_name='story_sessions')
    op.drop_index(op.f('ix_story_user_created'), table_name='story_sessions')
    op.drop_index(op.f('ix_story_user_period'), table_name='story_sessions')
    op.drop_index(op.f('ix_story_user_status'), table_name='story_sessions')
    op.drop_table('story_sessions')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_life_area_created'), table_name='projects')
    op.drop_index(op.f('ix_projects_user_created'), table_name='projects')
    op.drop_index(op.f('ix_projects_user_priority'), table_name='projects')
    op.drop_index(op.f('ix_projects_user_status'), table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_uid'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tasks_completed'), table_name='tasks', postgresql_where="((status)::text = 'completed'::text)")
    op.drop_index(op.f('ix_tasks_due_date'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_goal_created'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_project_created'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_user_created'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_user_status'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_media_attachments_id'), table_name='media_attachments')
    op.drop_index(op.f('ix_media_goal'), table_name='media_attachments')
    op.drop_index(op.f('ix_media_project'), table_name='media_attachments')
    op.drop_index(op.f('ix_media_task'), table_name='media_attachments')
    op.drop_index(op.f('ix_media_user_created'), table_name='media_attachments')
    op.drop_index(op.f('ix_media_user_type'), table_name='media_attachments')
    op.drop_table('media_attachments')
    op.drop_index(op.f('ix_life_areas_id'), table_name='life_areas')
    op.drop_index(op.f('ix_life_areas_user_created'), table_name='life_areas')
    op.drop_index(op.f('ix_life_areas_user_name'), table_name='life_areas')
    op.drop_table('life_areas')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('life_areas',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('life_areas_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('weight', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name='life_areas_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='life_areas_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_life_areas_user_name'), 'life_areas', ['user_id', 'name'], unique=False)
    op.create_index(op.f('ix_life_areas_user_created'), 'life_areas', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_life_areas_id'), 'life_areas', ['id'], unique=False)
    op.create_table('media_attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('goal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name=op.f('media_attachments_goal_id_fkey')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('media_attachments_project_id_fkey')),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('media_attachments_task_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('media_attachments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('media_attachments_pkey'))
    )
    op.create_index(op.f('ix_media_user_type'), 'media_attachments', ['user_id', 'file_type'], unique=False)
    op.create_index(op.f('ix_media_user_created'), 'media_attachments', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_media_task'), 'media_attachments', ['task_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_media_project'), 'media_attachments', ['project_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_media_goal'), 'media_attachments', ['goal_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_media_attachments_id'), 'media_attachments', ['id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('goal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('life_area_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name=op.f('tasks_goal_id_fkey')),
    sa.ForeignKeyConstraint(['life_area_id'], ['life_areas.id'], name=op.f('tasks_life_area_id_fkey')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('tasks_project_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('tasks_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    op.create_index(op.f('ix_tasks_user_status'), 'tasks', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_tasks_user_created'), 'tasks', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_tasks_project_created'), 'tasks', ['project_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index(op.f('ix_tasks_goal_created'), 'tasks', ['goal_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_tasks_due_date'), 'tasks', ['user_id', 'due_date'], unique=False)
    op.create_index(op.f('ix_tasks_completed'), 'tasks', ['user_id', sa.literal_column('created_at DESC')], unique=False, postgresql_where="((status)::text = 'completed'::text)")
    op.create_table('users',
    sa.Column('uid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uid', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_uid'), 'users', ['uid'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('life_area_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'todo'::character varying"), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('target_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=False),
    sa.Column('phases', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['life_area_id'], ['life_areas.id'], name='projects_life_area_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name='projects_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_projects_user_status'), 'projects', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_projects_user_priority'), 'projects', ['user_id', 'priority'], unique=False)
    op.create_index(op.f('ix_projects_user_created'), 'projects', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_projects_life_area_created'), 'projects', ['life_area_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_table('story_sessions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('generated_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('video_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('audio_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('summary_period', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('content_type', postgresql.ENUM('summary', 'story', 'reflection', 'achievement', name='story_content_type'), autoincrement=False, nullable=True),
    sa.Column('posted_to', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('posting_status', postgresql.ENUM('draft', 'scheduled', 'posted', 'failed', name='posting_status'), autoincrement=False, nullable=True),
    sa.Column('scheduled_post_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('generation_prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('generation_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estimated_read_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source_goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_tasks', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_life_areas', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('like_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('share_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('engagement_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('user_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('regeneration_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_status', postgresql.ENUM('pending', 'generating', 'completed', 'failed', name='processing_status'), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('posted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('story_sessions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('story_sessions_pkey'))
    )
    op.create_index(op.f('ix_story_user_status'), 'story_sessions', ['user_id', 'processing_status'], unique=False)
    op.create_index(op.f('ix_story_user_period'), 'story_sessions', ['user_id', 'summary_period'], unique=False)
    op.create_index(op.f('ix_story_user_created'), 'story_sessions', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_story_sessions_id'), 'story_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_story_posted_at'), 'story_sessions', ['posted_at'], unique=False)
    op.create_index(op.f('ix_story_content_type'), 'story_sessions', ['content_type', sa.literal_column('created_at DESC')], unique=False)
    op.create_table('intent_feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('conversation_log_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_intent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('original_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('original_entities', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('corrected_intent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('corrected_entities', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('feedback_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('feedback_quality', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['conversation_log_id'], ['conversation_logs.id'], name=op.f('intent_feedback_conversation_log_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('intent_feedback_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('intent_feedback_pkey'))
    )
    op.create_index(op.f('ix_intent_feedback_user_created'), 'intent_feedback', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_intent_feedback_quality'), 'intent_feedback', ['feedback_quality', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_intent_feedback_original_intent'), 'intent_feedback', ['original_intent', 'feedback_type'], unique=False)
    op.create_index(op.f('ix_intent_feedback_id'), 'intent_feedback', ['id'], unique=False)
    op.create_table('assistant_profiles',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ai_model', sa.VARCHAR(), server_default=sa.text("'gpt-3.5-turbo'::character varying"), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=False),
    sa.Column('requires_confirmation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('style', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text('\'{"formality": 50, "directness": 50, "humor": 30, "empathy": 70, "motivation": 60}\'::json'), autoincrement=False, nullable=False),
    sa.Column('dialogue_temperature', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0.8'::double precision"), autoincrement=False, nullable=False),
    sa.Column('intent_temperature', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0.3'::double precision"), autoincrement=False, nullable=False),
    sa.Column('custom_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('assistant_profiles_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('assistant_profiles_pkey'))
    )
    op.create_index(op.f('ix_assistant_profiles_user_default'), 'assistant_profiles', ['user_id', 'is_default'], unique=False)
    op.create_index(op.f('ix_assistant_profiles_user_created'), 'assistant_profiles', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_assistant_profiles_user_active'), 'assistant_profiles', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_assistant_profiles_model_language'), 'assistant_profiles', ['ai_model', 'language'], unique=False)
    op.create_index(op.f('ix_assistant_profiles_id'), 'assistant_profiles', ['id'], unique=False)
    op.create_table('feedback_logs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('context_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('context_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feedback_type', postgresql.ENUM('positive', 'negative', 'neutral', name='feedback_type'), autoincrement=False, nullable=False),
    sa.Column('feedback_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action_taken', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('reward_signal', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('device_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feature_flags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('feedback_logs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('feedback_logs_pkey'))
    )
    op.create_index(op.f('ix_feedback_user_type'), 'feedback_logs', ['user_id', 'feedback_type'], unique=False)
    op.create_index(op.f('ix_feedback_user_created'), 'feedback_logs', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_feedback_session'), 'feedback_logs', ['session_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_feedback_processed'), 'feedback_logs', ['processed_at'], unique=False)
    op.create_index(op.f('ix_feedback_logs_id'), 'feedback_logs', ['id'], unique=False)
    op.create_index(op.f('ix_feedback_context'), 'feedback_logs', ['context_type', sa.literal_column('created_at DESC')], unique=False)
    op.create_table('conversation_sessions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('session_type', sa.VARCHAR(), server_default=sa.text("'chat'::character varying"), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('current_intent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('incomplete_entities', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('turn_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('successful_intents', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('failed_intents', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('avg_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('conversation_sessions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('conversation_sessions_pkey'))
    )
    op.create_index(op.f('ix_conversation_sessions_user_activity'), 'conversation_sessions', ['user_id', sa.literal_column('last_activity DESC')], unique=False)
    op.create_index(op.f('ix_conversation_sessions_type_user'), 'conversation_sessions', ['session_type', 'user_id'], unique=False)
    op.create_index(op.f('ix_conversation_sessions_status_created'), 'conversation_sessions', ['status', sa.literal_column('started_at DESC')], unique=False)
    op.create_index(op.f('ix_conversation_sessions_id'), 'conversation_sessions', ['id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tone', postgresql.ENUM('friendly', 'coach', 'minimal', 'professional', name='tone_style'), autoincrement=False, nullable=True),
    sa.Column('notification_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('notifications_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('prefers_video', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('prefers_audio', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('default_view', postgresql.ENUM('list', 'card', 'timeline', name='view_mode'), autoincrement=False, nullable=True),
    sa.Column('mood_tracking_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('progress_charts_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ai_suggestions_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('default_life_area_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_sharing_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('analytics_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['default_life_area_id'], ['life_areas.id'], name=op.f('user_preferences_default_life_area_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('user_preferences_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_preferences_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_preferences_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_user_prefs_user_created'), 'user_preferences', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_user_preferences_id'), 'user_preferences', ['id'], unique=False)
    op.create_table('conversation_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('intent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('entities', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fallback_used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('processing_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('conversation_turn', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('previous_intent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('conversation_logs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('conversation_logs_pkey'))
    )
    op.create_index(op.f('ix_conversation_logs_user_created'), 'conversation_logs', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_conversation_logs_session_turn'), 'conversation_logs', ['session_id', 'conversation_turn'], unique=False)
    op.create_index(op.f('ix_conversation_logs_intent_confidence'), 'conversation_logs', ['intent', sa.literal_column('confidence DESC')], unique=False)
    op.create_index(op.f('ix_conversation_logs_id'), 'conversation_logs', ['id'], unique=False)
    op.create_index(op.f('ix_conversation_logs_fallback'), 'conversation_logs', ['fallback_used', sa.literal_column('created_at DESC')], unique=False)
    op.create_table('memory_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('memory_items_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('memory_items_pkey'))
    )
    op.create_index(op.f('ix_memory_user_timestamp'), 'memory_items', ['user_id', sa.literal_column('timestamp DESC')], unique=False)
    op.create_index(op.f('ix_memory_items_id'), 'memory_items', ['id'], unique=False)
    op.create_table('goals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('life_area_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['life_area_id'], ['life_areas.id'], name=op.f('goals_life_area_id_fkey')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('goals_project_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], name=op.f('goals_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('goals_pkey'))
    )
    op.create_index(op.f('ix_goals_user_status'), 'goals', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_goals_user_created'), 'goals', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_goals_project_created'), 'goals', ['project_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_goals_life_area_created'), 'goals', ['life_area_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_goals_id'), 'goals', ['id'], unique=False)
    # ### end Alembic commands ###